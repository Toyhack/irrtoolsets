#define yy_create_buffer rpsl_create_buffer
#define yy_delete_buffer rpsl_delete_buffer
#define yy_scan_buffer rpsl_scan_buffer
#define yy_scan_string rpsl_scan_string
#define yy_scan_bytes rpsl_scan_bytes
#define yy_flex_debug rpsl_flex_debug
#define yy_init_buffer rpsl_init_buffer
#define yy_flush_buffer rpsl_flush_buffer
#define yy_load_buffer_state rpsl_load_buffer_state
#define yy_switch_to_buffer rpsl_switch_to_buffer
#define yyin rpslin
#define yyleng rpslleng
#define yylex rpsllex
#define yyout rpslout
#define yyrestart rpslrestart
#define yytext rpsltext
#define yywrap rpslwrap

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /proj/cvs/prod/IRRToolset/src/rpsl/rpsl/rpsl.l.cc,v 1.2 2006/06/08 16:08:25 shane Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
static yyconst short int yy_accept[481] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   62,    4,   61,    3,
        4,    2,    4,   59,   50,   49,   60,   48,   11,   10,
       48,   12,   48,   47,   47,   47,   48,   13,   11,   12,
       14,   11,   12,   41,   11,   10,   25,   12,   41,   41,
       41,   41,   16,   41,   37,   41,   37,   37,   37,   37,
       37,   37,    7,    6,    7,    5,   41,   16,   41,    3,
        0,    2,    0,    0,    1,   59,   58,   51,   52,   56,
       57,   53,   55,   54,   11,    9,    9,    8,   47,   12,
        0,    0,   13,   11,   12,   14,   12,    0,    0,    0,

        9,    8,    0,   12,   12,   12,    0,   16,    0,    0,
       16,   24,    0,   16,    0,    0,   21,    0,    0,   37,
        0,   37,    0,   37,   37,   37,   37,   37,   37,   37,
       37,    7,    7,    5,    0,   16,   43,   42,   44,   51,
       52,    0,   10,    0,    0,    0,    0,    0,   12,   12,
       12,   12,   24,   39,   24,    0,    0,   24,   16,    0,
       23,    0,    0,   21,   38,   37,    0,   29,   37,   37,
       37,   37,    0,   37,   37,   46,   16,    0,   51,    0,
        0,    0,    0,    0,   12,   12,   12,   12,    0,   39,
        0,    0,   24,    0,   16,    0,   23,    0,    0,   19,

       21,    0,   39,   38,   37,    0,   30,    0,   37,   37,
       37,   37,    0,   31,   37,   35,   16,   45,   40,   40,
        0,    0,   12,   12,    0,   24,   39,   24,   39,   16,
       23,    0,    0,    0,   21,   21,    0,    0,    0,    0,
        0,   36,    0,   37,    0,    0,    0,   16,    0,    0,
        0,   12,    0,   16,    0,   23,    0,    0,    0,   17,
       17,   21,   21,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   34,   37,    0,   33,    0,    0,    0,
        0,   32,   40,   40,   40,   12,   26,   16,   23,    0,
        0,    0,   21,   21,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   12,    0,   16,    0,    0,    0,   17,   21,   21,
        0,    0,   30,    0,    0,   30,    0,    0,    0,    0,
       31,    0,    0,    0,    0,    0,    0,   31,    0,    0,
        0,    0,    0,   40,   40,   12,   27,    0,    0,    0,
       21,   21,    0,   30,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   31,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   21,   21,    0,
        0,    0,   34,    0,    0,   33,    0,   32,   34,    0,
        0,   33,    0,    0,    0,   32,    0,    0,   40,   28,

       28,    0,    0,    0,   21,   21,   30,    0,    0,    0,
        0,   31,    0,    0,    0,    0,    0,    0,    0,   21,
       21,    0,    0,    0,    0,    0,    0,    0,   28,    0,
        0,    0,   21,   21,    0,   34,   34,   33,    0,   33,
       32,    0,   32,    0,    0,    0,    0,   21,   21,    0,
        0,    0,   22,   21,   21,    0,    0,    0,   22,   21,
       21,    0,   20,   22,   21,    0,    0,   22,   21,    0,
       18,   18,    0,    0,    0,   18,    0,    0,   15,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   17,   17,   18,   12,   19,
       20,   21,    1,   22,   30,   31,   32,   32,   33,   34,
       35,   23,   23,   23,   23,   36,   23,   37,   23,   38,
       23,   39,   40,   41,   42,   23,   23,   23,   23,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   32,

       33,   34,   35,   23,   23,   23,   23,   36,   23,   37,
       23,   38,   23,   39,   40,   41,   42,   23,   23,   23,
       23,   23,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[43] =
    {   0,
        1,    2,    3,    4,    1,    5,    1,    6,    6,    1,
        1,    6,    7,    8,    9,   10,   10,   11,    6,    1,
        6,   12,    7,    6,    5,    6,    1,    7,    1,   10,
       10,   10,   10,   10,    7,    7,    7,    7,    7,    7,
        7,    7
    } ;

static yyconst short int yy_base[571] =
    {   0,
        0,    6,    8,    9,   47,   70,   14,   20,   28,   93,
      100,    0, 1814,    2,  129,  133, 1816, 1818, 1818,    0,
       61, 1818,  135,    0, 1818, 1818,  148, 1818,   24,  150,
     1795,    0, 1805,    0, 1793,   49, 1786,    0,   84,    0,
        0,  164,  165,   65,  168,  169,    0,  190, 1818,  203,
      225,   76,  254, 1793,  288,  161,  315, 1770,  165,   20,
       58, 1770,    0, 1818,  219, 1818,  217,  142,  340,    0,
      247, 1818,  262,  264, 1818,    0, 1818,  190,  227, 1818,
     1818, 1818, 1818, 1818,  182,  310, 1818, 1818, 1818,    0,
     1788, 1778,    0,  186,    0,    0,  225,  196, 1784,  362,

      259,  320, 1799,  403,  428,  442,  319,  344,  262,  484,
        0,  525,  280,  543,  321,  402, 1789, 1789,  577,    0,
      290,  604, 1784,  327, 1765, 1759, 1766, 1761, 1784, 1757,
     1753,    0,  384, 1818, 1745,  354,  419,  421,  339,  364,
      397,  458, 1818,  434,  638,  450, 1744, 1733,  679,  693,
      476, 1740,  734,  514,  530,  406,  534,  550,  752,  539,
      492, 1733,  428,  182,  786,  813,  847,  552, 1710, 1684,
     1683, 1684,  889, 1678, 1682, 1818,  452,  585,  486,  523,
     1700,  931,  960,  532,  609, 1687,  977,  545, 1018, 1050,
      741,  555,  569,  611,  615,  678,  646, 1682, 1679,  630,

      408,    0,    0,    0, 1678,    0,  137,  681, 1653, 1672,
     1652, 1668,    0,  350, 1648,    0,  723,  673,  730, 1646,
     1626,  745, 1625,  749,  768,  829,  757,  761,  778,  818,
      696, 1618, 1615,  794,  528,  641,  433, 1591, 1594,   43,
      667,    0, 1067, 1589, 1109,  905, 1151,  931,  701,    0,
      821,  839,  849,  938,  855,  897, 1609, 1585, 1582, 1818,
      956,  684,  880,    0, 1558, 1564,  968, 1555, 1561, 1546,
     1549, 1522,    0,  577, 1542,    0,  626, 1516, 1518, 1510,
        0,  735,  923, 1535,  981,  985, 1009, 1022,  891, 1529,
     1518,  962,  944,  968, 1028, 1492,  281, 1030, 1485, 1484,

     1477,  346, 1460,  863,  458,  987, 1455, 1453, 1019, 1011,
     1016, 1026, 1180, 1196, 1446, 1441, 1440, 1039, 1035, 1044,
        0,  840, 1075, 1408,  993, 1047, 1347, 1304, 1315, 1058,
     1100, 1308, 1235, 1231, 1208, 1196,  418, 1117, 1192, 1060,
     1166, 1166, 1154, 1143, 1187, 1191, 1201, 1217, 1159, 1145,
     1061, 1112, 1142, 1198, 1123, 1196, 1081, 1207, 1209, 1159,
     1076, 1082, 1213, 1078, 1048, 1039, 1212, 1214, 1222, 1004,
      991, 1227, 1234, 1236,  978,  974,  970, 1154, 1231,    0,
      934, 1241, 1242,  950, 1244, 1245, 1246, 1248, 1261,  927,
      925, 1264,  918,  915,  893, 1267,  871,  851, 1248,  567,

      522,  855,  841,  833, 1253, 1271,  831,  828,  809,  782,
      791,  780,  750,  763, 1277, 1275,  746,  742,  737, 1280,
     1281,    0, 1274,  702,  682, 1284,  610, 1287, 1290, 1288,
      624,  612, 1293, 1295, 1296, 1301,  606,  585, 1303, 1304,
      561, 1305, 1307,  547,  487,  480,  468, 1308, 1312,    0,
     1320,  420,  368, 1323,  285, 1323,  265, 1326,  259, 1329,
      254,  786, 1329,  231,  222, 1346, 1338,  209,  198, 1336,
     1818, 1345, 1347, 1349,  185, 1351, 1353, 1355, 1818, 1818,
     1372, 1384, 1396, 1408, 1420, 1432, 1444, 1450, 1461, 1473,
     1485, 1497, 1509, 1521, 1533, 1545, 1557, 1568, 1580, 1592,

     1604, 1607, 1610, 1611, 1614, 1625, 1631, 1632, 1634, 1637,
      171, 1639, 1641, 1644, 1647, 1652, 1653, 1655, 1658,  164,
     1660, 1662, 1665, 1668, 1673, 1677, 1678, 1680, 1683,  152,
     1688, 1692, 1693, 1695, 1698, 1701, 1706, 1710, 1714, 1715,
     1717, 1720,  134, 1722, 1724, 1727, 1730, 1732, 1734, 1737,
       46, 1742, 1746, 1750, 1751, 1753, 1756, 1759, 1761, 1763,
     1766,   15, 1768, 1771, 1773, 1776, 1778, 1780, 1782, 1784
    } ;

static yyconst short int yy_def[571] =
    {   0,
      481,  481,  482,  482,  483,  483,  484,  484,  485,  485,
      480,   11,  486,  486,   11,   11,  480,  480,  480,  487,
      480,  480,  488,  489,  480,  480,  490,  480,  480,  480,
      480,  491,  480,  480,  480,  480,  480,  492,  492,  493,
      494,  480,  495,  496,  480,  496,  497,  498,  480,  496,
      480,  480,   51,  480,  480,   51,   55,   57,   57,   55,
       55,   55,  499,  480,  499,  480,  480,   53,  496,  487,
      480,  480,  488,  488,  480,  489,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  491,
      480,  480,  492,  492,  493,  494,  495,  496,  500,  480,

      496,  496,  497,  498,  501,  104,  500,  496,   51,  480,
       51,  480,  110,   53,  502,  114,  503,   55,  480,   55,
      110,   55,  502,   55,  122,   55,   55,   55,   55,   55,
       55,  499,  499,  480,  480,  114,  496,  496,   69,  480,
      480,  480,  480,  500,  480,  100,  100,  480,  501,  149,
      106,  106,  500,  110,  110,  480,  480,  110,  114,  159,
      504,  504,  480,  505,  480,  122,  480,   55,   55,   55,
       55,   55,  480,   55,   55,  480,  159,   69,  480,  145,
      145,  506,  506,  507,  150,  150,  150,  187,  153,  110,
      480,  480,  480,  110,   51,   51,  508,  509,  508,  480,

      510,  511,  165,  165,   55,  167,  167,  480,   55,   55,
       55,   55,  173,  173,   55,   55,   51,   69,  183,  183,
      507,  507,  187,  187,  189,  189,  110,  110,  110,   51,
      512,  512,  513,  480,  514,  515,  480,  480,  480,  480,
      480,   55,  480,   55,  480,  480,  480,   51,  183,  516,
      516,  187,  110,   51,  480,  480,  480,  517,  518,  480,
      480,  480,  519,  520,  480,  480,  480,  480,  480,  480,
      480,  480,  243,  243,   55,  245,  245,  480,  480,  480,
      247,  247,  183,  516,  516,  187,  110,   51,  480,  521,
      522,  480,  523,  524,  480,  480,  525,  480,  480,  480,

      480,  526,  480,  480,  480,  480,  480,  480,  480,  183,
      516,  187,  500,   51,  480,  527,  528,  480,  480,  529,
      530,  531,  480,  480,  525,  525,  480,  480,  480,  526,
      526,  480,  480,  480,  480,  480,  480,  480,  480,  532,
      480,  480,  480,  183,  516,  187,  500,  480,  533,  534,
      535,  536,  531,  531,  480,  537,  480,  538,  539,  480,
      480,  480,  480,  480,  480,  480,  532,  532,  480,  480,
      480,  516,  500,  480,  480,  540,  541,  480,  542,  543,
      480,  537,  537,  480,  538,  538,  539,  539,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  516,  500,

      373,  480,  544,  545,  546,  547,  480,  480,  480,  480,
      480,  480,  480,  480,  373,  480,  480,  548,  549,  480,
      550,  551,  552,  480,  480,  553,  480,  554,  373,  480,
      555,  556,  557,  558,  552,  552,  480,  480,  553,  553,
      480,  554,  554,  480,  480,  559,  560,  480,  561,  562,
      480,  563,  564,  565,  566,  480,  480,  480,  567,  480,
      568,  480,  480,  569,  570,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,    0,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,

      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480
    } ;

static yyconst short int yy_nxt[1861] =
    {   0,
      480,  480,   19,   65,   66,   65,   20,   21,   22,   21,
       25,   25,   20,   26,   26,   39,   30,   39,   91,   89,
       40,   39,   30,   39,  455,   85,   40,   85,   23,   42,
       30,   42,   27,   27,   43,   23,   23,   23,   23,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   29,   30,
       29,   31,  127,   32,   33,  434,   31,   31,  128,   31,
       31,   31,   71,   72,   71,   34,   35,   36,   89,   92,
       37,   29,   30,   29,   31,  269,   32,   33,   99,   31,
       31,  270,   31,   31,   31,   94,  100,   94,   34,   35,
       36,  112,  112,   37,   42,   30,   42,  129,  130,   43,

       44,   45,   46,   45,   44,   47,   48,   49,   49,   44,
       50,   49,   51,   52,   44,   53,   53,   54,   49,   44,
       49,   44,   55,   49,   49,   49,   44,   56,   44,   57,
       58,   58,   58,   59,   55,   55,   55,   60,   61,   55,
       62,   55,   67,  406,   68,   68,   67,   73,   68,   68,
      119,   86,   75,   86,  237,   69,   87,  136,  136,   69,
       88,  352,   73,   78,   79,   85,   90,   85,   90,   85,
       86,   85,   86,  294,  121,  101,  109,  109,   80,  102,
      236,   81,   99,   85,   82,   85,   83,   94,   84,   94,
      100,   90,   98,   90,  125,   90,  163,   90,   90,  202,

      126,   90,  477,  105,  120,  140,  141,   90,   90,   99,
       90,  106,  163,   90,   90,   90,  107,  100,  108,  108,
      133,  134,  133,  458,  100,   98,   90,   98,   90,   98,
      135,   98,  112,  112,   98,   98,  163,  109,  110,   98,
      111,  111,  141,  141,   98,  458,  100,  109,   71,   72,
       71,   98,  109,   98,  109,  109,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,  109,  113,  163,  114,
      114,  115,   99,  458,   73,  121,   73,  109,  109,  480,
      100,   75,  447,  116,  116,  116,  116,  116,   98,   73,
       98,   73,   98,  325,   98,  158,  158,   98,   98,  163,

      118,  119,   98,  120,  120,  154,  154,   98,  325,  100,
      120,  142,  143,  142,   98,  118,   98,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      122,  122,  123,   99,  153,  153,  161,  161,  117,  167,
      145,  100,  168,  168,  122,  122,  122,  122,  122,   98,
      137,  178,  138,   99,  124,  139,  139,  107,  330,  108,
      108,  100,   98,  119,   98,  100,   98,  246,   98,  177,
      177,   98,   98,  330,  146,   99,   98,  147,  147,  179,
      141,   98,  458,  100,  146,  133,  134,  133,   98,  146,
       98,  146,  146,  146,  146,  146,  146,  146,  146,  146,

      146,  146,  146,  146,   90,   98,   90,  156,   90,  156,
       90,   90,  141,  141,   90,  121,  105,  160,  160,  123,
       90,   90,  163,   90,  106,  202,   90,   90,   90,   90,
      144,   90,   99,   90,   99,   90,   90,  447,  157,   90,
      100,   90,  100,  200,  200,   90,   90,   99,   90,  150,
      364,   90,   90,   90,  151,  145,  365,  152,  152,  142,
      143,  142,  265,  182,  151,  146,  146,  217,  217,  151,
      266,  151,  151,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  144,  117,  144,  336,  144,  187,
      144,  151,  151,  144,  144,  337,  154,  447,  144,  155,

      155,  141,  141,  144,  419,  145,  154,  197,  197,  198,
      144,  154,  144,  154,  154,  154,  154,  154,  154,  154,
      154,  154,  154,  154,  154,  154,  156,  121,  156,  154,
      154,  156,  144,  156,  415,  191,  182,  191,  180,  180,
      112,  112,  163,  121,  192,  202,  192,  222,  222,  193,
      193,  156,  121,  156,  196,  196,  123,  157,  159,  159,
      224,  224,  190,  194,  451,  158,  158,  168,  168,  208,
      193,  193,  160,  160,  160,  160,  160,  144,  309,  144,
       99,  144,  190,  144,  193,  193,  144,  144,  145,  154,
      119,  144,  154,  154,  304,   98,  144,   98,  145,  165,

      218,  218,  305,  144,  154,  144,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  165,  166,
      166,  123,  187,  304,  185,  185,  229,  229,  113,  447,
      230,  230,  115,  166,  166,  166,  166,  166,  144,  119,
      144,  419,  144,  305,  144,  200,  200,  144,  144,  441,
      180,   99,  144,  181,  181,  163,  234,  144,  264,  145,
      180,  231,  231,  198,  144,  180,  144,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
       90,  144,   90,   98,   90,   98,   90,   90,  218,  218,
       90,  121,  105,  109,  109,  123,   90,   90,  163,   90,

      150,  202,   90,   90,   90,  185,  271,  272,  186,  186,
      238,  256,  256,  198,  239,  185,  283,  283,  240,  241,
      185,  438,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  156,  113,  156,  248,  248,
      115,  437,  191,  182,  191,  219,  219,   99,  119,  153,
      153,  192,  309,  192,  117,  145,  193,  193,  251,  419,
      222,  222,  252,  377,  224,  224,  189,  195,  195,  480,
      121,  480,  228,  228,  121,  428,  228,  228,  144,  427,
      144,  196,  196,  196,  196,  196,  144,  466,  144,  466,
      144,  253,  144,  229,  229,  144,  144,  246,  203,  121,

      144,  204,  204,  426,  260,  144,  260,  145,  204,  261,
      261,  425,  144,  203,  144,  204,  204,  204,  204,  204,
      204,  204,  204,  204,  204,  204,  204,  204,  205,  205,
      480,  113,  480,  254,  254,  255,  285,  285,  424,  144,
      423,  144,  205,  205,  205,  205,  205,   98,  237,   98,
      419,   98,  353,   98,  286,  286,   98,   98,  377,  206,
      121,   98,  207,  207,  287,  287,   98,  353,  100,  207,
      289,  289,  416,   98,  206,   98,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,   98,
      414,   98,  333,   98,  163,   98,  334,  264,   98,   98,

      335,  213,  121,   98,  214,  214,  289,  289,   98,  413,
      100,  214,  289,  289,  198,   98,  213,   98,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  144,  412,  144,  278,  144,  310,  144,  283,  283,
      144,  144,  279,  280,  113,  144,  248,  248,  255,  411,
      144,  113,  145,  288,  288,  255,  410,  144,  163,  144,
      144,  264,  144,  409,  144,  408,  144,  208,  292,  144,
      144,  261,  261,  407,  144,  220,  220,  318,  318,  144,
      297,  145,  163,  298,  298,  321,  144,  117,  144,  223,
       90,  377,  223,  223,  311,  317,  285,  285,  312,  223,

      286,  286,  338,  338,  223,  325,  223,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  191,
      325,  191,  121,  313,  287,  287,  344,  344,  225,  398,
      225,  345,  345,  226,  226,  113,  397,  314,  314,  255,
      322,  346,  346,  323,  323,  298,  298,  208,  341,  163,
      144,  191,  264,  191,  318,  318,  342,  343,  163,  325,
      225,  321,  227,  121,  237,  228,  228,   98,  395,   98,
      330,   98,  367,   98,  325,  163,   98,   98,  321,  273,
      121,   98,  274,  274,  394,  330,   98,  367,  100,  274,
      323,  323,  237,   98,  273,   98,  274,  274,  274,  274,

      274,  274,  274,  274,  274,  274,  274,  274,  274,   98,
      393,   98,  330,   98,  391,   98,  390,  246,   98,   98,
      384,  276,  121,   98,  277,  277,  163,  330,   98,  380,
      100,  277,  338,  338,  246,   98,  276,   98,  277,  277,
      277,  277,  277,  277,  277,  277,  277,  277,  277,  277,
      277,   98,  381,   98,  353,   98,  182,   98,  344,  344,
       98,   98,  377,  281,  121,   98,  282,  282,  163,  353,
       98,  321,  100,  282,  389,  389,  317,   98,  281,   98,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,   99,  371,  347,  347,  348,  370,  348,

      372,  145,  345,  345,  187,  369,  346,  346,  382,  113,
      353,  248,  248,  255,   99,  237,  347,  347,  348,  385,
      348,  387,  145,  382,  367,  353,  367,  373,  392,  392,
      366,  246,  374,  374,  385,  363,  387,  396,  396,  367,
      362,  367,  399,  399,  400,  163,  400,   99,  380,  401,
      401,  402,  402,  382,  382,  145,  385,  385,  387,  304,
      387,  250,  305,  399,  399,  309,  361,  163,  382,  382,
      380,  385,  385,  387,  360,  387,  389,  389,  304,  392,
      392,  305,  396,  396,  309,  163,  435,  144,  422,  144,
      430,  430,  429,  429,  163,  163,  439,  380,  422,  442,

      144,  435,  144,  444,  444,  429,  429,  163,  435,  163,
      422,  439,  450,  435,  442,  439,  439,  442,  304,  442,
      359,  305,  163,  435,  309,  422,  163,  358,  435,  450,
      439,  439,  442,  357,  442,  456,  456,  163,  462,  462,
      450,  463,  463,  163,  463,  463,  450,  466,  471,  466,
      471,  473,  473,  472,  472,  467,  470,  474,  470,  356,
      472,  472,  475,  475,  476,  476,  476,  476,  478,  478,
      479,  479,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   28,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   70,   70,  355,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   74,  117,  317,   74,
       74,   76,   76,  259,   76,  340,   76,   76,   76,   76,
       76,   76,   76,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   90,   90,  339,   90,   90,
       90,   90,   90,   90,   90,   90,   90,   93,   93,  332,

       93,   93,   93,   93,   93,   93,   93,   93,   93,   95,
       95,  329,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   96,  328,  327,  324,   96,   96,   96,   96,   96,
       96,   96,   96,   97,   97,  317,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   98,  259,   98,  250,  308,
      307,   98,   98,   98,   98,  306,   98,  103,  103,  208,
      303,  302,  103,  103,  103,  103,  103,  103,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      132,  132,  301,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  144,  300,  144,  299,  296,  295,  144,  117,

      144,  144,  259,  144,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  162,  162,  164,  164,
      199,  199,  201,  201,  201,  219,  198,  219,  275,  268,
      267,  219,  259,  219,  219,  198,  219,  221,  187,  250,
      221,  232,  232,  233,  233,  235,  235,  235,  257,  257,
      258,  258,  262,  262,  262,  263,  263,  263,  284,  249,
      247,  284,  290,  290,  291,  291,  293,  293,  293,  315,
      315,  316,  316,  319,  319,  319,  320,  320,  320,  326,
      245,  244,  326,  331,  243,  242,  331,  349,  349,  350,
      350,  351,  351,  351,  354,  123,  198,  354,  368,  117,

      188,  368,  375,  375,  376,  376,  378,  378,  378,  379,
      379,  379,  383,  183,  216,  383,  386,  215,  212,  386,
      388,  211,  210,  388,  403,  403,  404,  404,  405,  405,
      405,  417,  417,  418,  418,  420,  420,  420,  421,  421,
      421,  431,  431,  432,  432,  433,  433,  433,  436,  209,
      198,  436,  440,  188,  184,  440,  443,  183,  176,  443,
      445,  445,  446,  446,  448,  448,  448,  449,  449,  449,
      452,  452,  453,  453,  454,  454,  454,  457,  457,  459,
      459,  460,  460,  460,  461,  461,  464,  464,  465,  465,
      468,  468,  469,  469,  175,  174,  173,  172,  171,  170,

      169,  117,  121,  163,  148,  145,   91,   89,  131,  120,
      117,   89,   89,   89,   89,  480,   64,   17,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480
    } ;

static yyconst short int yy_chk[1861] =
    {   0,
        0,    0,    1,   14,   14,   14,    1,    2,    2,    2,
        3,    4,    2,    3,    4,    7,    7,    7,   34,   34,
        7,    8,    8,    8,  562,   29,    8,   29,    2,    9,
        9,    9,    3,    4,    9,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    5,    5,
        5,    5,   60,    5,    5,  551,    5,    5,   60,    5,
        5,    5,   21,   21,   21,    5,    5,    5,   36,   36,
        5,    6,    6,    6,    6,  240,    6,    6,   44,    6,
        6,  240,    6,    6,    6,   39,   44,   39,    6,    6,
        6,   52,   52,    6,   10,   10,   10,   61,   61,   10,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   15,  543,   15,   15,   16,   23,   16,   16,
      207,   30,   23,   30,  207,   15,   30,   68,   68,   16,
       30,  530,   23,   27,   27,   42,   43,   42,   43,   45,
       46,   45,   46,  520,   56,   46,   56,   56,   27,   46,
      511,   27,   46,   85,   27,   85,   27,   94,   27,   94,
       46,   48,   48,   48,   59,   48,  164,   48,   48,  164,

       59,   48,  475,   48,   59,   78,   78,   48,   48,   98,
       48,   48,  469,   48,   48,   48,   50,   98,   50,   50,
       65,   65,   65,  468,   50,   51,   97,   51,   97,   51,
       67,   51,   67,   67,   51,   51,  465,   51,   51,   51,
       51,   51,   79,   79,   51,  464,   51,   51,   71,   71,
       71,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   53,  461,   53,
       53,   53,  101,  459,   73,  109,   74,  109,  109,   73,
      101,   74,  457,   53,   53,   53,   53,   53,   55,   73,
       55,   74,   55,  297,   55,  113,  113,   55,   55,  455,

       55,   55,   55,   55,   55,  121,  121,   55,  297,   55,
       55,   86,   86,   86,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       57,   57,   57,  102,  107,  107,  115,  115,  115,  124,
      107,  102,  124,  124,   57,   57,   57,   57,   57,  139,
       69,  139,   69,   69,   57,   69,   69,  108,  302,  108,
      108,   69,  100,  214,  100,  108,  100,  214,  100,  136,
      136,  100,  100,  302,  100,  100,  100,  100,  100,  140,
      140,  100,  453,  100,  100,  133,  133,  133,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,

      100,  100,  100,  100,  104,  104,  104,  156,  104,  156,
      104,  104,  141,  141,  104,  116,  104,  116,  116,  116,
      104,  104,  201,  104,  104,  201,  104,  104,  104,  105,
      105,  105,  137,  105,  138,  105,  105,  452,  156,  105,
      137,  105,  138,  163,  163,  105,  105,  144,  105,  105,
      337,  105,  105,  105,  106,  144,  337,  106,  106,  142,
      142,  142,  237,  146,  106,  146,  146,  177,  177,  106,
      237,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,  110,  447,  110,  305,  110,  151,
      110,  151,  151,  110,  110,  305,  110,  446,  110,  110,

      110,  179,  179,  110,  445,  110,  110,  161,  161,  161,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  112,  154,  112,  154,
      154,  155,  401,  155,  401,  157,  180,  157,  180,  180,
      112,  112,  235,  155,  157,  235,  157,  184,  184,  157,
      157,  158,  160,  158,  160,  160,  160,  112,  114,  114,
      188,  188,  155,  158,  444,  158,  158,  168,  168,  168,
      192,  192,  114,  114,  114,  114,  114,  119,  441,  119,
      400,  119,  158,  119,  193,  193,  119,  119,  400,  119,
      274,  119,  119,  119,  274,  178,  119,  178,  119,  119,

      178,  178,  438,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  122,
      122,  122,  185,  437,  185,  185,  194,  194,  195,  432,
      195,  195,  195,  122,  122,  122,  122,  122,  145,  277,
      145,  431,  145,  277,  145,  200,  200,  145,  145,  427,
      145,  145,  145,  145,  145,  236,  200,  145,  236,  145,
      145,  197,  197,  197,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      149,  149,  149,  218,  149,  218,  149,  149,  218,  218,
      149,  196,  149,  196,  196,  196,  149,  149,  262,  149,

      149,  262,  149,  149,  149,  150,  241,  241,  150,  150,
      208,  231,  231,  231,  208,  150,  249,  249,  208,  208,
      150,  425,  150,  150,  150,  150,  150,  150,  150,  150,
      150,  150,  150,  150,  150,  153,  217,  153,  217,  217,
      217,  424,  191,  219,  191,  219,  219,  153,  282,  153,
      153,  191,  282,  191,  419,  153,  191,  191,  222,  418,
      222,  222,  224,  417,  224,  224,  153,  159,  159,  225,
      227,  225,  227,  227,  228,  414,  228,  228,  225,  413,
      225,  159,  159,  159,  159,  159,  165,  462,  165,  462,
      165,  229,  165,  229,  229,  165,  165,  412,  165,  165,

      165,  165,  165,  411,  234,  165,  234,  165,  165,  234,
      234,  410,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  165,  165,  165,  165,  166,  166,
      226,  230,  226,  230,  230,  230,  251,  251,  409,  226,
      408,  226,  166,  166,  166,  166,  166,  167,  407,  167,
      404,  167,  322,  167,  252,  252,  167,  167,  403,  167,
      167,  167,  167,  167,  253,  253,  167,  322,  167,  167,
      255,  255,  402,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  173,
      398,  173,  304,  173,  263,  173,  304,  263,  173,  173,

      304,  173,  173,  173,  173,  173,  289,  289,  173,  397,
      173,  173,  256,  256,  256,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  182,  395,  182,  246,  182,  283,  182,  283,  283,
      182,  182,  246,  246,  248,  182,  248,  248,  248,  394,
      182,  254,  182,  254,  254,  254,  393,  182,  293,  182,
      183,  293,  183,  391,  183,  390,  183,  384,  261,  183,
      183,  261,  261,  381,  183,  183,  183,  292,  292,  183,
      267,  183,  294,  267,  267,  294,  183,  377,  183,  187,
      187,  376,  187,  187,  285,  375,  285,  285,  286,  187,

      286,  286,  306,  306,  187,  325,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  187,  187,  187,  187,  189,
      325,  189,  287,  287,  287,  287,  310,  310,  189,  371,
      189,  311,  311,  189,  189,  288,  370,  288,  288,  288,
      295,  312,  312,  295,  295,  298,  298,  298,  309,  319,
      189,  190,  319,  190,  318,  318,  309,  309,  320,  326,
      190,  320,  190,  190,  326,  190,  190,  243,  366,  243,
      330,  243,  340,  243,  326,  351,  243,  243,  351,  243,
      243,  243,  243,  243,  365,  330,  243,  340,  243,  243,
      323,  323,  323,  243,  243,  243,  243,  243,  243,  243,

      243,  243,  243,  243,  243,  243,  243,  243,  243,  245,
      364,  245,  331,  245,  362,  245,  361,  331,  245,  245,
      357,  245,  245,  245,  245,  245,  352,  331,  245,  352,
      245,  245,  338,  338,  338,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  247,  355,  247,  353,  247,  344,  247,  344,  344,
      247,  247,  350,  247,  247,  247,  247,  247,  378,  353,
      247,  378,  247,  247,  360,  360,  349,  247,  247,  247,
      247,  247,  247,  247,  247,  247,  247,  247,  247,  247,
      247,  247,  247,  313,  343,  313,  313,  314,  342,  314,

      345,  313,  345,  345,  346,  341,  346,  346,  356,  314,
      354,  314,  314,  314,  347,  354,  347,  347,  348,  358,
      348,  359,  347,  356,  367,  354,  368,  347,  363,  363,
      339,  368,  348,  348,  358,  336,  359,  369,  369,  367,
      335,  368,  372,  372,  373,  379,  373,  373,  379,  373,
      373,  374,  374,  382,  383,  373,  385,  386,  387,  383,
      388,  399,  386,  399,  399,  388,  334,  405,  382,  383,
      405,  385,  386,  387,  333,  388,  389,  389,  389,  392,
      392,  392,  396,  396,  396,  406,  423,  415,  406,  415,
      416,  416,  415,  415,  420,  421,  426,  420,  421,  428,

      429,  423,  429,  430,  430,  429,  429,  433,  435,  434,
      433,  426,  434,  436,  428,  439,  440,  442,  436,  443,
      332,  440,  448,  435,  443,  448,  449,  329,  436,  449,
      439,  440,  442,  328,  443,  451,  451,  454,  456,  456,
      454,  458,  458,  460,  463,  463,  460,  466,  467,  466,
      467,  470,  470,  467,  467,  463,  466,  472,  466,  327,
      472,  472,  473,  473,  474,  474,  476,  476,  477,  477,
      478,  478,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  482,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  483,  483,  483,  483,

      483,  483,  483,  483,  483,  483,  483,  483,  484,  484,
      484,  484,  484,  484,  484,  484,  484,  484,  484,  484,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
      485,  485,  486,  486,  486,  486,  486,  486,  486,  486,
      486,  486,  486,  486,  487,  487,  324,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  488,  317,  316,  488,
      488,  489,  489,  315,  489,  308,  489,  489,  489,  489,
      489,  489,  489,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  490,  490,  491,  491,  307,  491,  491,
      491,  491,  491,  491,  491,  491,  491,  492,  492,  303,

      492,  492,  492,  492,  492,  492,  492,  492,  492,  493,
      493,  301,  493,  493,  493,  493,  493,  493,  493,  493,
      493,  494,  300,  299,  296,  494,  494,  494,  494,  494,
      494,  494,  494,  495,  495,  291,  495,  495,  495,  495,
      495,  495,  495,  495,  495,  496,  290,  496,  284,  280,
      279,  496,  496,  496,  496,  278,  496,  497,  497,  275,
      272,  271,  497,  497,  497,  497,  497,  497,  498,  498,
      498,  498,  498,  498,  498,  498,  498,  498,  498,  498,
      499,  499,  270,  499,  499,  499,  499,  499,  499,  499,
      499,  499,  500,  269,  500,  268,  266,  265,  500,  259,

      500,  500,  258,  500,  501,  501,  501,  501,  501,  501,
      501,  501,  501,  501,  501,  501,  502,  502,  503,  503,
      504,  504,  505,  505,  505,  506,  257,  506,  244,  239,
      238,  506,  233,  506,  506,  232,  506,  507,  223,  221,
      507,  508,  508,  509,  509,  510,  510,  510,  512,  512,
      513,  513,  514,  514,  514,  515,  515,  515,  516,  220,
      215,  516,  517,  517,  518,  518,  519,  519,  519,  521,
      521,  522,  522,  523,  523,  523,  524,  524,  524,  525,
      212,  211,  525,  526,  210,  209,  526,  527,  527,  528,
      528,  529,  529,  529,  531,  205,  199,  531,  532,  198,

      186,  532,  533,  533,  534,  534,  535,  535,  535,  536,
      536,  536,  537,  181,  175,  537,  538,  174,  172,  538,
      539,  171,  170,  539,  540,  540,  541,  541,  542,  542,
      542,  544,  544,  545,  545,  546,  546,  546,  547,  547,
      547,  548,  548,  549,  549,  550,  550,  550,  552,  169,
      162,  552,  553,  152,  148,  553,  554,  147,  135,  554,
      555,  555,  556,  556,  557,  557,  557,  558,  558,  558,
      559,  559,  560,  560,  561,  561,  561,  563,  563,  564,
      564,  565,  565,  565,  566,  566,  567,  567,  568,  568,
      569,  569,  570,  570,  131,  130,  129,  128,  127,  126,

      125,  123,  118,  117,  103,   99,   92,   91,   62,   58,
       54,   37,   35,   33,   31,   17,   13,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480,
      480,  480,  480,  480,  480,  480,  480,  480,  480,  480
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "rpsl.l"
#define INITIAL 0
/*
// Copyright (c) 2001,2002                        RIPE NCC
//
// All Rights Reserved
//
// Permission to use, copy, modify, and distribute this software and its
// documentation for any purpose and without fee is hereby granted,
// provided that the above copyright notice appear in all copies and that
// both that copyright notice and this permission notice appear in
// supporting documentation, and that the name of the author not be
// used in advertising or publicity pertaining to distribution of the
// software without specific, written prior permission.
//
// THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
// ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS; IN NO EVENT SHALL
// AUTHOR BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY
// DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
// AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
//
//  $Id$
//
//  Copyright (c) 1994 by the University of Southern California
//  All rights reserved.
//
//    Permission is hereby granted, free of charge, to any person obtaining a copy
//    of this software and associated documentation files (the "Software"), to deal
//    in the Software without restriction, including without limitation the rights
//    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//    copies of the Software, and to permit persons to whom the Software is
//    furnished to do so, subject to the following conditions:
//
//    The above copyright notice and this permission notice shall be included in
//    all copies or substantial portions of the Software.
//
//    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//    THE SOFTWARE.
//
//  Questions concerning this software should be directed to
//  irrtoolset@cs.usc.edu.
//
//  Author(s): Cengiz Alaettinoglu <cengiz@ISI.EDU>
//             Katie Petrusha <katie@ripe.net>
*/
/* definitions */
#define STRING 1

#define EXPECT_OPERATOR 2

#define FREETEXT 3

#define BLOBMODE 4

#define GENERICMODE 5

#define SKIP_OBJECT 6

#define POLICYMODE 7

/*%option nodefault /* */
/*%option debug /* */
#line 102 "rpsl.l"
#include "config.h"
#include <cstring>
#include <cstdarg>
#include <cstdio>
#include <time.h>
extern "C" {
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif
}

#include "object.hh"
#include "rpsl.y.hh"
#include "schema.hh"

#ifndef HAVE_TIMEGM
extern long int timezone;
#endif

static int errorLine = 0;
static int errorColon = 0;
#define errorNewLine { errorLine++;   errorColon = 0; }

static int scan_position = 0;
static bool start_of_object = true;
static bool genericMode = true;
static int oldStart = 0;

Object *current_object;
Attr   *current_attribute;
YY_BUFFER_STATE rpsl_buffer = (YY_BUFFER_STATE) NULL;

#define MAX_STR_CONST 1024
#define LEXER_RETURN return
#define YY_USER_ACTION { scan_position += yyleng; errorColon += yyleng; }
#define YYLESS(n) {scan_position -= yyleng - n; errorColon -= yyleng - n; yyless(n); }
#define yylval rpsllval
#define yy_scan_object rpsl_scan_object
#define yyschema schema

extern void handle_error(char *, ...);
extern void handle_warning(char *, ...);
extern "C" {
extern void atollRA(...);
}
#line 1082 "lex.rpsl.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		yy_current_buffer->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 149 "rpsl.l"

 
   /* this code is copied to beginning of yylex */
   static char string_buf[MAX_STR_CONST];
   char *string_buf_ptr;


#line 1244 "lex.rpsl.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 481 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1818 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 156 "rpsl.l"
{ //
   errorLine = 0; 
   errorColon = yyleng;

   *(yytext + yyleng - 1) = 0; // remove ':'

   yylval.attr = new Attr;
   yylval.attr->offset = scan_position - yyleng;
   current_attribute = yylval.attr;

   if (start_of_object) {
      start_of_object = false;
      current_object->type = yyschema.searchClass(yytext);
      if (!current_object->type) {
	 handle_error("Error: unknown class \"%s\"\n", yytext);
	 yylval.attr->type   = NULL;
//(*current_object) += yylval.attr;
	 BEGIN(SKIP_OBJECT);
	 LEXER_RETURN(TKN_UNKNOWN_CLASS);
      }
   }

   yylval.attr->type   = current_object->type->searchAttr(yytext);
   yylval.attr->object = current_object;

//   (*current_object) += yylval.attr;

   if (! yylval.attr->type) {
      if (! schema.isForgiving())
	 handle_error("Error: unknown attribute %s of class %s\n",
		      yytext, current_object->type->name);
      BEGIN(FREETEXT);
      LEXER_RETURN(ATTR_FREETEXT);
   }

   if (yylval.attr->type->isObsolete())
      handle_warning("Warning: attribute %s of class %s is now obsolete\n", 
	      yytext, current_object->type->name);

   if (!yylval.attr->type->shouldParse()) { // may be free text?
      BEGIN(FREETEXT);
      LEXER_RETURN(ATTR_FREETEXT);
   } else {
      if (yylval.attr->type->syntax() == ATTR_GENERIC) {
	 genericMode = true;
	 BEGIN(GENERICMODE);
      } else if (yylval.attr->type->syntax() == ATTR_BLOBS) {
	 genericMode = true;
	 BEGIN(BLOBMODE);
      } else if (yylval.attr->type->syntax() == ATTR_REGEXP) {
	 genericMode = true;
	 BEGIN(FREETEXT);
      } else {
	 genericMode = false;
	 BEGIN(POLICYMODE);
      }
      LEXER_RETURN(yylval.attr->type->syntax());
   }
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 216 "rpsl.l"
{
   if (current_attribute)
      current_attribute->len = scan_position - current_attribute->offset;
   LEXER_RETURN(TKN_EOO);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(EXPECT_OPERATOR):
case YY_STATE_EOF(FREETEXT):
case YY_STATE_EOF(BLOBMODE):
case YY_STATE_EOF(GENERICMODE):
case YY_STATE_EOF(SKIP_OBJECT):
case YY_STATE_EOF(POLICYMODE):
#line 222 "rpsl.l"
{
   yy_delete_buffer(rpsl_buffer);
   rpsl_buffer = (YY_BUFFER_STATE) NULL;
   if (current_attribute)
      current_attribute->len = scan_position - current_attribute->offset;
   BEGIN(INITIAL);
   yyterminate();
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 231 "rpsl.l"

	YY_BREAK
case 4:
YY_RULE_SETUP
#line 233 "rpsl.l"
{ // not a valid line
   current_attribute = NULL;
   handle_error("Error: valid lines start with attribute names, spaces or #\n");
   BEGIN(FREETEXT);
   LEXER_RETURN(TKN_ERROR);
}
	YY_BREAK

case 5:
YY_RULE_SETUP
#line 241 "rpsl.l"
{
     BEGIN(INITIAL);
     if (current_attribute)
        current_attribute->len = scan_position - current_attribute->offset;
     LEXER_RETURN(TKN_EOO);
  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 247 "rpsl.l"
errorNewLine;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 248 "rpsl.l"
;
	YY_BREAK


case 8:
YY_RULE_SETUP
#line 252 "rpsl.l"
errorNewLine; errorColon++; // line continuation with +
	YY_BREAK
case 9:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 253 "rpsl.l"
errorNewLine; // line continuation with space or comment
	YY_BREAK
case 10:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 254 "rpsl.l"
{ // end of attribute and may be end of object too
      BEGIN(INITIAL);
      if (current_attribute)
	 current_attribute->len = scan_position - current_attribute->offset;
      LEXER_RETURN(TKN_EOA);
   }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 260 "rpsl.l"
; // skip white space
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 261 "rpsl.l"
; // skip comment 
	YY_BREAK

// dont parse anything, keep going till EOA
case 13:
YY_RULE_SETUP
#line 265 "rpsl.l"
; // this rule needs to be after \n rules
	YY_BREAK


case 14:
YY_RULE_SETUP
#line 269 "rpsl.l"
{
     yylval.string = strdup(yytext);
     LEXER_RETURN(TKN_BLOB);
  }
	YY_BREAK


case 15:
YY_RULE_SETUP
#line 276 "rpsl.l"
{
     tm ts;
     bzero((char *) &ts, sizeof(ts));

     int date, zone_hours, zone_mins;
     sscanf(yytext, "%d %d:%d:%d %d:%d", 
		    &date, 
		    &ts.tm_hour, &ts.tm_min, &ts.tm_sec,
		    &zone_hours, &zone_mins);

     ts.tm_mday = date % 100; date /= 100;
     ts.tm_mon  = date % 100 - 1; date /= 100;
     ts.tm_year = date - 1900;
   
     if (ts.tm_mday > 31) {
	handle_error("Error: Invalid day %d\n", ts.tm_mday);
	LEXER_RETURN(TKN_ERROR);
     }
     if (ts.tm_mon > 11) {
	handle_error("Error: Invalid month %d\n", ts.tm_mon);
	LEXER_RETURN(TKN_ERROR);
     }
     if (ts.tm_year < 70) {
	handle_error("Error: Invalid year %d\n", ts.tm_year);
	LEXER_RETURN(TKN_ERROR);
     }
     if (ts.tm_sec > 59) {
	handle_error("Error: Invalid sec %d\n", ts.tm_sec);
	LEXER_RETURN(TKN_ERROR);
     }
     if (ts.tm_min > 59) {
	handle_error("Error: Invalid min %d\n", ts.tm_min);
	LEXER_RETURN(TKN_ERROR);
     }
     if (ts.tm_hour > 23) {
	handle_error("Error: Invalid hour %d\n", ts.tm_hour);
	LEXER_RETURN(TKN_ERROR);
     }
     if (zone_mins > 59) {
	handle_error("Error: Invalid zone min %d\n", zone_mins);
	LEXER_RETURN(TKN_ERROR);
     }
     if (zone_hours > 23) {
	handle_error("Error: Invalid zone hour %d\n", zone_hours);
	LEXER_RETURN(TKN_ERROR);
     }

     // this fiddling with TZ is necessary for mktime to use utc as timezone
     // it sucks, there's got to be a better way
     time_t result;
#ifdef HAVE_TIMEGM
     result = timegm(&ts);
#else
     result = mktime(&ts);
     result -= timezone;
#endif
/*
     char *TZ=getenv("TZ");
     if (TZ)
	TZ = strdup(TZ);
     setenv("TZ", "", 1);
     time_t result = mktime(&ts);
     if (TZ) {
	setenv("TZ", TZ, 1);
	free(TZ);
     } else
	unsetenv("TZ");
*/
     if (zone_hours < 0)
	zone_mins *= -1;

     result += zone_mins * 60 + zone_hours * 60 * 60;
   
     yylval.time = result;
     LEXER_RETURN(TKN_TIMESTAMP);
  }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 355 "rpsl.l"
{
     // The following code causes problem on Solaris since long long int
     // is not standardized yet 
     // sscanf(yytext, "%Ld", &(yylval.i));
     atollRA(yytext, &yylval.i);
     LEXER_RETURN(TKN_INT);
  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 363 "rpsl.l"
{
     yylval.prfxv6rng = new IPv6PrefixRange(yytext);
     if (yylval.prfxv6rng->valid()) {
       LEXER_RETURN(TKN_PRFXV6RNG);
     }
     else 
       LEXER_RETURN(TKN_ERROR);
  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 372 "rpsl.l"
{
     yylval.prfxv6rng = new IPv6PrefixRange(yytext);
     if (yylval.prfxv6rng->valid()) {
       LEXER_RETURN(TKN_PRFXV6RNG);
     }
     else 
       LEXER_RETURN(TKN_ERROR);
  }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 381 "rpsl.l"
{
     yylval.prfxv6 = new IPv6Prefix(yytext);
     if (yylval.prfxv6->valid()) {
       LEXER_RETURN(TKN_PRFXV6);
     }
     else
       LEXER_RETURN(TKN_ERROR);
  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 390 "rpsl.l"
{
     yylval.prfxv6 = new IPv6Prefix(yytext);
     if (yylval.prfxv6->valid()) {
       LEXER_RETURN(TKN_PRFXV6);
     }
     else
       LEXER_RETURN(TKN_ERROR);
  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 399 "rpsl.l"
{
     yylval.ipv6 = new IPv6Addr(yytext);
     if (yylval.ipv6->valid()) {
       LEXER_RETURN(TKN_IPV6);
     }
     else
       LEXER_RETURN(TKN_ERROR);
  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 408 "rpsl.l"
{
     yylval.ipv6 = new IPv6Addr(yytext);
     if (yylval.ipv6->valid()) {
       LEXER_RETURN(TKN_IPV6);
     }
     else
       LEXER_RETURN(TKN_ERROR);
  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 417 "rpsl.l"
{
     unsigned int ms, ls;
     char *colon = strchr(yytext, ':');
     *colon = 0;
     ms = atoi(yytext);
     ls = atoi(colon+1);
     if (ms > 65535 || ls > 65535)
	LEXER_RETURN(TKN_ERROR);

     yylval.i = (ms << 16) + ls;
     LEXER_RETURN(TKN_INT);
  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 430 "rpsl.l"
{
     yylval.real = atof(yytext);
     LEXER_RETURN(TKN_REAL);
  }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 435 "rpsl.l"
{
     string_buf_ptr = string_buf; 
     oldStart = YY_START;
     BEGIN(STRING);
  }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 441 "rpsl.l"
{
     yylval.ip = new IPAddr(yytext);
     LEXER_RETURN(TKN_IPV4);
  }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 446 "rpsl.l"
{
     yylval.prfx = new Prefix(yytext);
     LEXER_RETURN(TKN_PRFXV4);
  }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 451 "rpsl.l"
{
     yylval.prfxrng = new PrefixRange(yytext);
     LEXER_RETURN(TKN_PRFXV4RNG);
  }
	YY_BREAK
/* The order of these rules are important */
case 29:
YY_RULE_SETUP
#line 457 "rpsl.l"
{
     yylval.i = atoi(yytext+2);
     LEXER_RETURN(TKN_ASNO);
  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 462 "rpsl.l"
{
     yylval.sid = symbols.symID(yytext);
     LEXER_RETURN(TKN_ASNAME);
  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 467 "rpsl.l"
{
     yylval.sid = symbols.symID(yytext);
     LEXER_RETURN(TKN_RSNAME);
  }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 472 "rpsl.l"
{
     yylval.sid = symbols.symID(yytext);
     LEXER_RETURN(TKN_RTRSNAME);
  }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 477 "rpsl.l"
{
     yylval.sid = symbols.symID(yytext);
     LEXER_RETURN(TKN_PRNGNAME);
  }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 482 "rpsl.l"
{
     yylval.sid = symbols.symID(yytext);
     LEXER_RETURN(TKN_FLTRNAME);
  }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 487 "rpsl.l"
{
     yylval.i = 1;
     LEXER_RETURN(TKN_BOOLEAN);
  }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 492 "rpsl.l"
{
     yylval.i = 0;
     LEXER_RETURN(TKN_BOOLEAN);
  }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 497 "rpsl.l"
{ /* reserved word or rp-attribute, or arbitrary name */
     if (!genericMode) {
	oldStart = YY_START;

	int index;
	if ((index  = yyschema.searchKeyword(yytext)) >= 0) {
	   if (index == KEYW_OPERATOR)
	      BEGIN(EXPECT_OPERATOR);
	   LEXER_RETURN(index);
	}
     
	if ((yylval.rp_attr = yyschema.searchRPAttr(yytext)) != NULL) {
	   BEGIN(EXPECT_OPERATOR);
	   LEXER_RETURN(TKN_RP_ATTR);
	}
     }

     yylval.string = strdup(yytext);

     // in case of afi
     RPType *type1 = schema.searchTypedef("address_family");
     
     if (   (type1 != NULL) 
         && (type1->validate(new ItemWORD(yytext))) ) {
          yylval.afi = new AddressFamily(yytext);
          LEXER_RETURN(TKN_AFI);
     }  

     LEXER_RETURN(TKN_WORD);
  }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 528 "rpsl.l"
{ /* rp-attribute.method or DNS name */
     if (!genericMode) {
	char *p = strchr(yytext, '.');
	*p = 0;

	if ((yylval.rp_attr = yyschema.searchRPAttr(yytext)) != NULL) {
	   *p = '.';
	   YYLESS((p - yytext));
	   LEXER_RETURN(TKN_RP_ATTR);
	}

	*p = '.';
     }

     // in case of afi containing "."
     RPType *type1 = schema.searchTypedef("address_family");
     RPType *type2 = schema.searchTypedef("address_sub_family");
	   char *p = strchr(yytext, '.');
     char *a = (char *) calloc(sizeof(yytext),1);
     strncpy (a, yytext, (p-yytext)); 
     
     if (   (type1 != NULL) 
         && (type2 != NULL)
         && (type1->validate(new ItemWORD(a))) 
         && (type2->validate(new ItemWORD(p+1))) ) {
          free (a);
            yylval.afi = new AddressFamily(yytext);
          LEXER_RETURN(TKN_AFI);
     }  

     free(a);
     yylval.sid = symbols.symID(yytext);
     LEXER_RETURN(TKN_DNS);
  }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 563 "rpsl.l"
{ /* DNS name */
     yylval.sid = symbols.symID(yytext);
     LEXER_RETURN(TKN_DNS);
  }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 568 "rpsl.l"
{ /* email */  
     yylval.string = strdup(yytext);
     LEXER_RETURN(TKN_EMAIL);
  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 573 "rpsl.l"
{
     if (*yytext <= 0) {
	handle_error("Error: Non-ASCII character encountered\n");
	LEXER_RETURN(TKN_ERROR);
     } else
	LEXER_RETURN(*yytext);
  }
	YY_BREAK


case 42:
YY_RULE_SETUP
#line 583 "rpsl.l"
{
      yylval.moreSpecOp = new FilterMS(0);
      LEXER_RETURN(OP_MS);
   }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 588 "rpsl.l"
{
      yylval.moreSpecOp = new FilterMS(1);
      LEXER_RETURN(OP_MS);
   }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 593 "rpsl.l"
{
      int i;
      sscanf(yytext, "^%d", &i);
      yylval.moreSpecOp = new FilterMS(2, i, i);
      LEXER_RETURN(OP_MS);
   }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 600 "rpsl.l"
{
      int i, j;
      sscanf(yytext, "^%d-%d", &i, &j);
      yylval.moreSpecOp = new FilterMS(2, i, j);
      LEXER_RETURN(OP_MS);
   }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 607 "rpsl.l"
LEXER_RETURN(TKN_3DOTS);
	YY_BREAK


case 47:
YY_RULE_SETUP
#line 611 "rpsl.l"
{
      yylval.string = strdup(yytext);
      BEGIN(oldStart);
      LEXER_RETURN(TKN_OPERATOR);
   }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 617 "rpsl.l"
{
      YYLESS(0); 
      BEGIN(oldStart);
   }
	YY_BREAK


case 49:
YY_RULE_SETUP
#line 624 "rpsl.l"
{ /* saw closing quote - all done */
      BEGIN(oldStart);
      *string_buf_ptr = '\0';
      yylval.string = strdup(string_buf);
      LEXER_RETURN(TKN_STRING);
   }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 631 "rpsl.l"
{
      errorNewLine;
      handle_error("Error: unterminated string encountered\n");
      BEGIN(oldStart);
      if (current_attribute)
	 current_attribute->len = scan_position - current_attribute->offset;
      LEXER_RETURN(TKN_EOA);
   }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 640 "rpsl.l"
{
      /* octal escape sequence */
      int result;
      
      (void) sscanf( yytext + 1, "%o", &result );

      if ( result > 0xff ) {
	 handle_error("Error: octal escape sequence is out of bounds\n");
	 BEGIN(oldStart);
	 LEXER_RETURN(TKN_ERROR);
      }

      *string_buf_ptr++ = result;
   }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 655 "rpsl.l"
{			/* like '\48' or '\0777777' */
      handle_error("Error: bad octal escape sequence\n");
      BEGIN(oldStart);
      LEXER_RETURN(TKN_ERROR);
   }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 661 "rpsl.l"
*string_buf_ptr++ = '\n';
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 662 "rpsl.l"
*string_buf_ptr++ = '\t';
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 663 "rpsl.l"
*string_buf_ptr++ = '\r';
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 664 "rpsl.l"
*string_buf_ptr++ = '\b';
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 665 "rpsl.l"
*string_buf_ptr++ = '\f';
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 667 "rpsl.l"
*string_buf_ptr++ = yytext[1];
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 669 "rpsl.l"
{
      char *yptr = yytext;
      while ( *yptr )
	 *string_buf_ptr++ = *yptr++;
   }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 675 "rpsl.l"
*string_buf_ptr++ = yytext[0];
	YY_BREAK

case 61:
YY_RULE_SETUP
#line 678 "rpsl.l"
ECHO;
	YY_BREAK
#line 2060 "lex.rpsl.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 481 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 481 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 480);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	yy_current_buffer->yy_at_bol = (c == '\n');

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 678 "rpsl.l"

extern "C" {
int yywrap () {
   return 1;
}
}

void handle_error(char *s, ...) {
   current_object->has_error = true;

   char buffer[1024] = "***";
   va_list ap;
   va_start(ap, s);
   vsprintf(buffer+3, s, ap);
   va_end(ap);

   if (current_attribute)
      current_attribute->errors += buffer;
   else 
      current_object->errors += buffer;
}

void handle_object_error(char *s, ...) {
   current_object->has_error = true;

   char buffer[1024] = "***";
   va_list ap;
   va_start(ap, s);
   vsprintf(buffer+3, s, ap);
   va_end(ap);

   current_object->errors += buffer;
}

void rpslerror(char *, ...) {
   if (current_attribute) {
      current_attribute->errorLine = errorLine;
      current_attribute->errorColon = errorColon - yyleng;
      current_attribute->errorLeng  = yyleng;
   }
}

void handle_warning(char *s, ...) {
   current_object->has_warning = true;

   char buffer[1024];
   va_list ap;
   va_start(ap, s);
   vsprintf(buffer, s, ap);
   va_end(ap);

   if (current_attribute) 
      current_attribute->errors += buffer;
   else 
      current_object->errors += buffer;
}

void yy_scan_object(Object *o) {
   errorLine = 0; 
   errorColon = 0;
   current_object = o;
   current_attribute = NULL;
   start_of_object = true;
   scan_position = 0;
   genericMode = true;

   if (rpsl_buffer)
      yy_delete_buffer(rpsl_buffer);
   rpsl_buffer = yy_scan_bytes(o->contents, o->size);
   BEGIN(INITIAL);
}

Attr *changeCurrentAttr(Attr *b) {
   if (current_attribute) {
      b->object = current_attribute->object;
      b->type   = current_attribute->type;
      b->offset = current_attribute->offset;;
      b->len    = current_attribute->len;
      b->errors = current_attribute->errors;
      b->errorLine  = current_attribute->errorLine;
      b->errorColon = current_attribute->errorColon;
      b->errorLeng  = current_attribute->errorLeng;
      delete current_attribute;
   }
   current_attribute = b;
   return b;
}
